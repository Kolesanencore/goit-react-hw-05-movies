{"version":3,"file":"static/js/729.832d2ecf.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/MovieListItem/MovieListItem.styled.jsx","components/MovieListItem/MovieListItem.jsx","components/MovieList/MovieList.jsx","components/MovieList/MovieList.styled.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx","services/movieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loaderWrapper\":\"Loader_loaderWrapper__6ypwD\"};","import { MutatingDots } from 'react-loader-spinner';\n\nimport css from 'components/Loader/Loader.module.css';\n\nexport const Loader = ({ visible }) => {\n  return (\n    <div className={css.loaderWrapper}>\n      <MutatingDots\n        height=\"100\"\n        width=\"100\"\n        color=\"#bf3989\"\n        secondaryColor=\"#096bde)\"\n        radius=\"12.5\"\n        ariaLabel=\"mutating-dots-loading\"\n        wrapperClass=\"loaderWrapper\"\n        visible={visible}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\n\nexport const Img = styled.img`\n  margin-bottom: 8px;\n  width: 270px;\n  height: 450px;\n  object-fit: cover;\n  border-radius: 8px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nimport { Img } from './MovieListItem.styled';\n\nconst defaultImg = 'https://cdn-icons-png.flaticon.com/512/2748/2748558.png';\n\nexport const MovieListItem = ({ movie }) => {\n  const location = useLocation();\n\n  return (\n    <li key={movie.id}>\n      <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n        <Img\n          src={\n            movie.poster_path\n              ? `https://image.tmdb.org/t/p/w500/${movie.poster_path}`\n              : defaultImg\n          }\n          alt={movie.title}\n        />\n        <h3>{movie.title}</h3>\n        <p>{movie.release_date && movie.release_date.slice(0, 4)}</p>\n        <p>{movie.vote_average && movie.vote_average.toFixed(1)}</p>\n      </Link>\n    </li>\n  );\n};\n\nMovieListItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieListItem;\n","import MovieListItem from 'components/MovieListItem/MovieListItem';\n\nimport { NavList } from './MovieList.styled';\n\nexport const MovieList = ({ movies }) => {\n  return (\n    <NavList>\n      {movies.map(movie => (\n        <MovieListItem key={movie.id} movie={movie} />\n      ))}\n    </NavList>\n  );\n};\n\nexport default MovieList;\n","import styled from '@emotion/styled';\n\nexport const NavList = styled.ul`\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(auto-fill, 271px);\n  gap: 20px;\n  margin-top: 14px;\n`;\n\nexport const Container = styled.div`\n  max-width: 1180px;\n  padding: 0 16px;\n  margin: 0px auto;\n`;\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"SearchBar_SearchForm__J+i1a\",\"SearchForm-button\":\"SearchBar_SearchForm-button__9dEGw\",\"SearchForm-button-label\":\"SearchBar_SearchForm-button-label__ILeLu\",\"SearchForm-input\":\"SearchBar_SearchForm-input__pGYri\",\"search-icon\":\"SearchBar_search-icon__OScmK\"};","import { useForm } from 'react-hook-form';\n\nimport { FcSearch } from 'react-icons/fc';\n\nimport css from 'components/SearchBar/SearchBar.module.css';\n\nexport const SearchBar = ({ onSearch }) => {\n  const { register, handleSubmit, reset } = useForm();\n\n  const onSubmit = data => {\n    const searchQuery = data.searchQuery;\n    onSearch(searchQuery);\n    reset({ searchQuery: '' });\n  };\n\n  return (\n    <form className={css['SearchForm']} onSubmit={handleSubmit(onSubmit)}>\n      <input\n        className={css['SearchForm-input']}\n        type=\"text\"\n        placeholder=\"Search Movies\"\n        {...register('searchQuery', { required: true })}\n      />\n      <button className={css['SearchForm-button']} type=\"submit\">\n        <span className=\"button-label\">\n          <FcSearch className={css['search-icon']} />\n        </span>\n      </button>\n    </form>\n  );\n};\n\nexport default SearchBar;\n","import { useEffect, useState } from 'react';\n\nimport { useSearchParams } from 'react-router-dom';\n\nimport Loader from 'components/Loader/Loader';\n\nimport { getSearchMovie } from 'services/movieApi';\n\nimport MovieList from 'components/MovieList/MovieList';\nimport SearchBar from 'components/SearchBar/SearchBar';\n\nexport const Movies = () => {\n  const [searchResults, setSearchResults] = useState([]);\n  const [showLoader, setShowLoader] = useState(false);\n  const [searchExecuted, setSearchExecuted] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const handleSearch = searchQuery => {\n    setSearchExecuted(true);\n    setSearchParams(new URLSearchParams({ query: searchQuery }));\n  };\n\n  useEffect(() => {\n    if (query) {\n      const fetchData = async () => {\n        try {\n          setShowLoader(true);\n          const data = await getSearchMovie(query);\n          setSearchResults(data.results);\n        } catch (error) {\n          console.log('Error searching movies:', error);\n        } finally {\n          setShowLoader(false);\n        }\n      };\n\n      fetchData();\n    }\n  }, [query]);\n\n  return (\n    <section>\n      <SearchBar onSearch={handleSearch} />\n      {showLoader && <Loader visible={showLoader} />}\n      {searchExecuted && searchResults.length === 0 && (\n        <p>No search results found</p>\n      )}\n      {searchResults.length > 0 && <MovieList movies={searchResults} />}\n    </section>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'c209603f4e1441562adec7f34b907cef';\n\nconst axiosInst = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const getTrendingMovies = async (page = 1) => {\n  try {\n    const response = await axiosInst.get('trending/movie/week', {\n      params: {\n        page: page,\n      },\n    });\n\n    const results = response.data.results.slice(0, 12);\n    return {\n      ...response.data,\n      results,\n    };\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getSearchMovie = async (movieToSearch, page = 1) => {\n  try {\n    const response = await axiosInst.get('search/movie', {\n      params: {\n        query: movieToSearch,\n        page: page,\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchMovie = async movieId => {\n  try {\n    const response = await axiosInst.get(`movie/${movieId}`);\n\n    const { poster_path, title, vote_average, overview, genres } =\n      response.data;\n    const src = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://cdn-icons-png.flaticon.com/512/2748/2748558.png';\n    const userScore = Math.ceil(vote_average * 10);\n\n    const genresList = genres.map(({ id, name }) => <li key={id}>{name}</li>);\n\n    return { src, title, userScore, overview, genresList };\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    const response = await axiosInst.get(`movie/${movieId}/reviews`);\n\n    const reviews = response.data.results.map(({ author, id, content }) => ({\n      author,\n      id,\n      content,\n    }));\n\n    return reviews;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchCast = async movieId => {\n  try {\n    const response = await axiosInst.get(`movie/${movieId}/credits`);\n    const cast = response.data.cast.map(\n      ({ name, character, id, profile_path }) => {\n        const src = profile_path\n          ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n          : 'https://cdn-icons-png.flaticon.com/512/2748/2748558.png';\n        return {\n          name,\n          character,\n          id,\n          src,\n        };\n      }\n    );\n    return cast;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"],"names":["Loader","visible","className","css","height","width","color","secondaryColor","radius","ariaLabel","wrapperClass","Img","styled","movie","location","useLocation","to","id","state","from","src","poster_path","alt","title","release_date","slice","vote_average","toFixed","movies","map","NavList","Container","onSearch","useForm","register","handleSubmit","reset","onSubmit","data","searchQuery","type","placeholder","required","Movies","useState","searchResults","setSearchResults","showLoader","setShowLoader","searchExecuted","setSearchExecuted","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchData","getSearchMovie","results","console","log","URLSearchParams","length","MovieList","axiosInst","axios","baseURL","params","api_key","getTrendingMovies","page","response","message","movieToSearch","fetchMovie","movieId","overview","genres","userScore","Math","ceil","genresList","name","fetchReviews","reviews","author","content","fetchCast","cast","character","profile_path"],"sourceRoot":""}