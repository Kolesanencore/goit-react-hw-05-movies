{"version":3,"file":"static/js/544.80ac6114.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/MovieListItem/MovieListItem.jsx","components/MovieList/MovieList.jsx","components/MovieList/MovieList.styled.jsx","pages/Home/Home.jsx","pages/MoviesDetails/MovieDetails.styled.jsx","services/movieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loaderWrapper\":\"Loader_loaderWrapper__6ypwD\"};","import { MutatingDots } from 'react-loader-spinner';\nimport React from 'react';\n\nimport css from 'components/Loader/Loader.module.css';\n\nexport const Loader = ({ visible }) => {\n  return (\n    <div className={css.loaderWrapper}>\n      <MutatingDots\n        height=\"100\"\n        width=\"100\"\n        color=\"#bf3989\"\n        secondaryColor=\"#096bde)\"\n        radius=\"12.5\"\n        ariaLabel=\"mutating-dots-loading\"\n        wrapperClass=\"loaderWrapper\"\n        visible={visible}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import { Link, useLocation } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nexport const MovieListItem = ({ movie }) => {\n  const location = useLocation();\n\n  return (\n    <li key={movie.id}>\n      <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n        {movie.poster_path && (\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n            alt={movie.title}\n          />\n        )}\n        <h3>{movie.title}</h3>\n        <p>{movie.release_date && movie.release_date.slice(0, 4)}</p>\n        <p>{movie.vote_average && movie.vote_average.toFixed(1)}</p>\n      </Link>\n    </li>\n  );\n};\n\nMovieListItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieListItem;\n","import MovieListItem from 'components/MovieListItem/MovieListItem';\n\nimport { Container, NavList } from './MovieList.styled';\n\nexport const MovieList = ({ movies }) => {\n  return (\n    <Container>\n      <NavList>\n        {movies.map(movie => (\n          <MovieListItem key={movie.id} movie={movie} />\n        ))}\n      </NavList>\n    </Container>\n  );\n};\n\nexport default MovieList;\n","import styled from '@emotion/styled';\n\nexport const NavList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 271px);\n  gap: 20px;\n`;\n\nexport const Container = styled.div`\n  max-width: 1180px;\n  padding: 20px 16px;\n  margin: 0px auto;\n`;\n","import { useEffect, useState } from 'react';\n\nimport Loader from 'components/Loader/Loader';\n\nimport { getTrendingMovies } from 'services/movieApi';\n\nimport MovieList from 'components/MovieList/MovieList';\n\nimport { Detail } from 'pages/MoviesDetails/MovieDetails.styled';\n\nexport const Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const fetchTrendingMovies = async () => {\n    try {\n      const data = await getTrendingMovies();\n      setTrendingMovies(data.results);\n    } catch (error) {\n      console.log('Error fetching trending movies:', error);\n    }\n  };\n\n  useEffect(() => {\n    setShowLoader(true);\n    fetchTrendingMovies()\n      .then(data => {\n        if (data && data.results) {\n          setTrendingMovies(data.results);\n        }\n      })\n      .catch(console.log)\n      .finally(() => setShowLoader(false));\n  }, []);\n\n  return (\n    <section>\n      <Detail>Tranding today</Detail>\n      <Loader visible={showLoader} />\n      {trendingMovies && trendingMovies.length > 0 ? (\n        <MovieList movies={trendingMovies} />\n      ) : (\n        <p> No trending movies found</p>\n      )}\n    </section>\n  );\n};\n\nexport default Home;\n","import { Link, NavLink } from 'react-router-dom';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nexport const LinkStyle = styled(Link)`\r\n  margin-left: 8px;\r\n  margin-top: 8px;\r\n  margin-right: 8px;\r\n  display: flex;\r\n  margin-bottom: 8px;\r\n  padding: 6px;\r\n  align-items: center;\r\n  font-weight: 700;\r\n  justify-content: center;\r\n  background-color: #e5a536;\r\n  color: white;\r\n\r\n  border-radius: 2px;\r\n\r\n  :hover {\r\n    box-shadow: 0 2px 8px rgba(255, 107, 1, 0),\r\n      inset 0 1px hsla(0, 0%, 100%, 0.3), inset 0 10px hsla(0, 0%, 100%, 0.2),\r\n      inset 0 10px 20px hsla(0, 0%, 100%, 0.25),\r\n      inset 0 -15px 30px rgba(255, 107, 1, 0.3);\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\n\r\nexport const Detail = styled.p`\r\n  font-family: Roboto;\r\n  font-size: 25px;\r\n  margin-top: 14px;\r\n  color: black;\r\n  letter-spacing: 1px;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  text-shadow: 1px 1px 0 #e5a536, -1px -1px 0 black, 1px -1px 0 black,\r\n    -1px 1px 0 black;\r\n`;\r\n\r\nexport const LinkList = styled.ul`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 12px;\r\n  margin-bottom: 14px;\r\n  margin-top: 14px;\r\n`;\r\n\r\nexport const StyledLink = styled(NavLink)`\r\n  padding: 8px;\r\n  border-radius: 12px;\r\n  font-size: 20px;\r\n  color: #e5a536;\r\n  font-weight: bold;\r\n  transition: transform 0.3s cubic-bezier(0.7, 0.98, 0.86, 0.98);\r\n\r\n  :hover,\r\n  :focus {\r\n    transform: scale(1.02);\r\n  }\r\n\r\n  &.active {\r\n    color: #ffffff;\r\n\r\n    text-transform: uppercase;\r\n    box-shadow: 0 4px 4px rgba(0, 0, 0, 0.64);\r\n    background: linear-gradient(135deg, #bf3989, #096bde);\r\n    box-shadow: 0 2px 8px rgba(255, 107, 1, 0),\r\n      inset 0 1px hsla(0, 0%, 100%, 0.3), inset 0 10px hsla(0, 0%, 100%, 0.2),\r\n      inset 0 10px 20px hsla(0, 0%, 100%, 0.25),\r\n      inset 0 -15px 30px rgba(255, 107, 1, 0.2);\r\n  }\r\n`;\r\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c209603f4e1441562adec7f34b907cef';\n\nexport const getTrendingMovies = async (page = 1) => {\n  const response = await axios.get(`${BASE_URL}trending/movie/week`, {\n    params: {\n      api_key: API_KEY,\n      page: page,\n    },\n  });\n\n  const results = response.data.results.slice(0, 12);\n  return {\n    ...response.data,\n    results,\n  };\n};\n\nexport const getSearchMovie = async (movieToSearch, page = 1) => {\n  const response = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: movieToSearch,\n      page: page,\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMovie = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n    );\n\n    const { poster_path, title, vote_average, overview, genres } =\n      response.data;\n    const src = poster_path\n      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n      : 'https://cdn-icons-png.flaticon.com/512/2748/2748558.png';\n    const userScore = Math.ceil(vote_average * 10);\n\n    const genresList = genres.map(({ id, name }) => <li key={id}>{name}</li>);\n\n    return { src, title, userScore, overview, genresList };\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n\n    const reviews = response.data.results.map(({ author, id, content }) => ({\n      author,\n      id,\n      content,\n    }));\n\n    return reviews;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast.map(\n      ({ name, character, id, profile_path }) => {\n        const src = profile_path\n          ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n          : 'https://cdn-icons-png.flaticon.com/512/2748/2748558.png';\n        return {\n          name,\n          character,\n          id,\n          src,\n        };\n      }\n    );\n    return cast;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"],"names":["Loader","visible","className","css","height","width","color","secondaryColor","radius","ariaLabel","wrapperClass","movie","location","useLocation","to","id","state","from","poster_path","src","alt","title","release_date","slice","vote_average","toFixed","movies","map","NavList","styled","Container","Home","useState","trendingMovies","setTrendingMovies","showLoader","setShowLoader","fetchTrendingMovies","getTrendingMovies","data","results","console","log","useEffect","then","catch","finally","length","LinkStyle","Link","Detail","LinkList","StyledLink","NavLink","BASE_URL","API_KEY","page","axios","params","api_key","response","getSearchMovie","movieToSearch","query","fetchMovie","movieId","overview","genres","userScore","Math","ceil","genresList","name","message","fetchReviews","reviews","author","content","fetchCast","cast","character","profile_path"],"sourceRoot":""}